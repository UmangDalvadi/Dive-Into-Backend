/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const fs = require('fs');
const { time } = require('console');
const { title } = require('process');
const { deserialize } = require('v8');

const app = express();

app.use(bodyParser.json());

function findIndex(arr, id) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].id === id) {
      return i;
    }
  }
  return -1;
}

app.get("/todos", (req, res) => {

  filePath = path.join(__dirname, './todos.json');

  fs.readFile(filePath, 'utf-8', (err, data) => {
    if (err) {
      throw new err;
    }
    res.json(JSON.parse(data));
  })

});

app.get("/todos/:id", (req, res) => {

  filePath = path.join(__dirname, './todos.json');
  idVar = parseInt(req.params.id);

  fs.readFile(filePath, 'utf-8', (err, data) => {
    if (err) {
      throw new err;
    }

    const parsedData = JSON.parse(data);

    const findId = findIndex(parsedData, idVar);

    if (findId === -1) {
      res.status(404).send();
    }
    else {
      res.json(parsedData[findId]);
    }

  })
});

app.post("/todos", (req, res) => {

  filePath = path.join(__dirname, './todos.json');
  id = Math.floor(Math.random() * 1000000);
  titleVar = req.body.title;
  description = req.body.description;
  completed = req.body.completed;


  fs.readFile(filePath, 'utf-8', (err, data) => {
    if (err) {
      throw new err;
    }

    let parsedData = JSON.parse(data);
    parsedData.push({
      id: id,
      title: titleVar,
      description: description,
      completed: completed
    });
    const stringData = JSON.stringify(parsedData);

    fs.writeFile(filePath, stringData, err => {
      if (err) {
        return res.status(500).json({ error: 'fail to post data' });
      }
      res.status(201).json({ id: id });
    })

  })

});

app.put("/todos/:id", (req, res) => {

  filePath = path.join(__dirname, './todos.json');
  id = req.params.id;
  titleVar = req.body.title;
  descriptionVar = req.body.description;
  completed = req.body.completed;

  fs.readFile(filePath, 'utf-8', (err, data) => {
    if (err) {
      throw new err;
    }

    let parsedData = JSON.parse(data);

    let item = parsedData.filter((x) => {
      return x.id == id;
    })

    if (item.length > 0) {
      for (let i = 0; i < parsedData.length; i++) {
        if (parsedData[i].id == item[0].id) {
          parsedData[i].title = titleVar;
          parsedData[i].description = descriptionVar;
          parsedData[i].completed = completed;

          const stringData = JSON.stringify(parsedData);

          fs.writeFile(filePath, stringData, err => {
            if (err) {
              throw new err;
            }
            res.status(200).send(parsedData[i]);
          })

        }
      }
    }
    else {
      res.status(404).send();
    }

  })

});

app.delete("/todos/:id", (req, res) => {

  filePath = path.join(__dirname, './todos.json');
  id = req.params.id;

  let temp = []

  fs.readFile(filePath, 'utf-8', (err, data) => {
    if (err) {
      throw new err;
    }

    let parsedData = JSON.parse(data);

    let item = parsedData.filter((x) => {
      return x.id == id;
    })

    if (item.length > 0) {
      for (let i = 0; i < parsedData.length; i++) {
        if (parsedData[i].id == item[0].id) {

        } else {
          temp.push(parsedData[i]);
        }
      }
      parsedData = temp;

      const stringData = JSON.stringify(parsedData);

      fs.writeFile(filePath, stringData, err => {
        if (err) {
          throw new err;
        }
        res.status(200).send();
      })
    }
    else {
      return res.status(404).send();
    }

  })

});

app.use((req, res, next) => {
  res.status(404).send();
})

// app.listen(3000);

module.exports = app;